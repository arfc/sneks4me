c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      include "/home/achaube/usrcode/limits.f"
      include "/home/achaube/usrcode/utilities.f"
      include "/home/achaube/usrcode/recycle.f"
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

c      implicit none

      integer ix,iy,iz,eg
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
      e = gllel(eg)

      cond_graphite = 13 ! "conservative" value from TM 3229
      cond_salt = 0.83 ! TM 3229
      k_ratio = cond_graphite/cond_salt

      udiff  = cpfld(ifield,1)
      utrans = cpfld(ifield,2)
      if(eg.gt.nelgv) then
        udiff = cpfld(ifield,1)*k_ratio
        utrans = 0.1
      endif
      

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /comparams/ dh,dhsi,zc1,zc2,zc3,uav
      integer e
      e = gllel(eg)

      g=9.8
      usq=uav*uav
      rhoin=2266.93334
      a=0.6
      rhot=2811.82334
      Tin=908.15
    
      templ=t(ix,iy,iz,e,1)
      
      comp=a*templ/(rhot-a*(templ+Tin))
      comp=1.0-comp
      comp=1.0/comp      

      ffx = 0.0
      ffy = 0.0
      ffz = g*dhsi*comp/usq/rhoin

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
      logical idid
      common /comparams/ dh,dhsi,zc1,zc2,zc3,uav
      real zhat,eps,rhos,cps
      real qscalef,qscaleg,mq,cq,qf,qs

c      e = gllel(eg)

      rhos=2258.6 ! fuel salt density, SI units
      cps=1966.48 ! fuel salt cp, SI units
c     dT=1.0
      qscalef=20000000.0 ! fuel salt mean source term value
      qscaleg=623000.0 ! graphite mean source term

      eps=0.01 ! yields a peak value of 31 W/cc in fuel salt

      zbar=(z-zc1)/(zc2-zc1) ! for sinusoidal source in channel
      mq=eps/(zc2-zc3) ! for linear source in plenum
      cq=eps*zc3/(zc3-zc2) ! for linear source in plenum

      qf=(mq*(zc3+zc2)/2.0)+cq+eps+(2.0/pi) ! calculated to make avg in fuel=1
      qf=1.0/qf
      qg=pi/2.0 ! makes source avg in graphite one
      qg=qg*qscaleg
      qf=qscalef*qf

      qf=qf*dhsi/(rhos*cps*uav) ! non-dimensionalize source amplitude
      qg=qg*dhsi/(rhos*cps*uav)

      qvol = qf * (sin(pi*zbar)+eps) ! sinusoid for channel
      if (z.gt.z2) qvol = qf*((mq*z)+cq)  ! linear for plenum
      if (eg.gt.nelgv) qvol = qg*sin(pi*zbar) ! graphite source

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
c      implicit none
      
      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c      logical idid
      common /comparams/ dh,dhsi,zc1,zc2,zc3,uav

      return
      end
c-----------------------------------------------------------------------

      subroutine userchk()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      common /comparams/ dh,dhsi,zc1,zc2,zc3,uav

      real maxtemp, vmax, vmin, roiz1, roiz2
      real tx, ty, tz, xv1, yv1, zv1, xv2, yv2, zv2 

      call load_fld('msre0.f00001')
      call domain_size(xmin,xmax,ymin,ymax,zmin,zmax)
      
      maxtemp = -9999.0
      vmax = -10000.0
      vmin = 9999.0
      roiz1 = zmin
      roiz2 = zmax

      do i = 1, lx1*ly1*lz1*nelt
          if (zm1(i,1,1,1).ge.roiz1.and.zm1(i,1,1,1).le.roiz2) then
              if (t(i,1,1,1,1) .gt. maxtemp) then
                  maxtemp = t(i,1,1,1,1)
              end if    
              if (vz(i,1,1,1) .gt. vmax) then
                  vmax = vz(i,1,1,1)
              end if    
              if (vz(i,1,1,1) .lt. vmin) then
                  vmin = vz(i,1,1,1)
              end if    
          end if
      end do
      
      maxtemp = glmax(maxtemp,1)
      vmax = glmax(vmax,1)
      vmin = glmin(vmin,1)


      tx  = -9999 
      y   = -9999
      tz  = -9999
      xv1 = -9999
      yv1 = -9999
      zv1 = -9999
      xv2 = -9999
      yv2 = -9999
      zv2 = -9999
      do i = 1, lx1*ly1*lz1*nelt
          if (zm1(i,1,1,1).ge.roiz1.and.zm1(i,1,1,1).le.roiz2) then
              if (t(i,1,1,1,1) == maxtemp) then 
                  tx = xm1(i,1,1,1)
                  ty = ym1(i,1,1,1)
                  tz = zm1(i,1,1,1)
              end if    
              if (vz(i,1,1,1) == vmax) then
                  xv1 = xm1(i,1,1,1)
                  yv1 = ym1(i,1,1,1)
                  zv1 = zm1(i,1,1,1)
              end if    
              if (vz(i,1,1,1) == vmin) then
                  xv2 = xm1(i,1,1,1)
                  yv2 = ym1(i,1,1,1)
                  zv2 = zm1(i,1,1,1)
              end if    
          end if
      end do

      tx = glmax(tx,1)
      ty = glmax(ty,1)
      tz = glmax(tz,1)
      xv1 = glmax(xv1,1)
      yv1 = glmax(yv1,1)
      zv1 = glmax(zv1,1)
      xv2 = glmax(xv2,1)
      yv2 = glmax(yv2,1)
      zv2 = glmax(zv2,1)

      open(unit=22,file='maxdat')
      if (nio.eq.0) then
          write(22,1) maxtemp,tx,ty,tz 
          write(22,2) vmax,xv1,yv1,zv1 
          write(22,3) vmin,xv2,yv2,zv2 
      endif 
1     format(1p4e16.8,' maxtemp/x/y/z')
2     format(1p4e16.8,' vmax/x/y/z')
3     format(1p4e16.8,' vmin/x/y/z')
      close(22)

      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'
      
      common /comparams/ dh,dhsi,zc1,zc2,zc3,uav

      dh=0.624
      dhsi=0.0158496
      zc1=-1.0/dh
      zc2=1.0/dh
      zc3=2.0/dh
      uav=0.2194
      return
      
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
