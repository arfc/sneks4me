c-----------------------------------------------------------------------
c  nek5000 user-file template
c
c  user specified routines:
c     - uservp  : variable properties
c     - userf   : local acceleration term for fluid
c     - userq   : local source term for scalars
c     - userbc  : boundary conditions
c     - useric  : initial conditions
c     - userchk : general purpose routine for checking errors etc.
c     - userqtl : thermal divergence for lowMach number flows 
c     - usrdat  : modify element vertices 
c     - usrdat2 : modify mesh coordinates
c     - usrdat3 : general purpose routine for initialization
c     
c-----------------------------------------------------------------------
      include "/home/achaube/usrcode/limits.f"
      include "/home/achaube/usrcode/utilities.f"
      include "/home/achaube/usrcode/recycle.f"
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,eg) ! set variable properties

c      implicit none

      integer ix,iy,iz,eg
     
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
      e = gllel(eg)

      cond_graphite = 13 ! "conservative" value from TM 3229
      cond_salt = 0.83 ! TM 3229
      k_ratio = cond_graphite/cond_salt

      udiff  = cpfld(ifield,1)
      utrans = cpfld(ifield,2)
      if(eg.gt.nelgv) then
        udiff = cpfld(ifield,1)*k_ratio
        utrans = 0.1
      endif
      

      return
      end
c-----------------------------------------------------------------------
      subroutine userf(ix,iy,iz,eg) ! set acceleration term
c
c     Note: this is an acceleration term, NOT a force!
c     Thus, ffx will subsequently be multiplied by rho(x,t).
c
c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      common /comparams/ dh,dhsi,zc1,zc2,zc3,uav
      integer e
      e = gllel(eg)

      g=9.8
      usq=uav*uav
      rhoin=2266.93334
      a=0.6
      rhot=2811.82334
      Tin=908.15
    
      templ=t(ix,iy,iz,e,1)
      
      comp=a*templ/(rhot-a*(templ+Tin))
      comp=1.0-comp
      comp=1.0/comp      

      ffx = 0.0
      ffy = 0.0
      ffz = g*dhsi*comp/usq/rhoin

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,eg) ! set source term

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
      logical idid
      common /comparams/ dh,dhsi,zc1,zc2,zc3,uav
      real zhat,eps,rhos,cps
      real qscalef,qscaleg,mq,cq,qf,qs

c      e = gllel(eg)

      rhos=2258.6 ! fuel salt density, SI units
      cps=1966.48 ! fuel salt cp, SI units
c     dT=1.0
      qscalef=20000000.0 ! fuel salt mean source term value
      qscaleg=623000.0 ! graphite mean source term

      eps=0.01 ! yields a peak value of 31 W/cc in fuel salt

      zbar=(z-zc1)/(zc2-zc1) ! for sinusoidal source in channel
      mq=eps/(zc2-zc3) ! for linear source in plenum
      cq=eps*zc3/(zc3-zc2) ! for linear source in plenum

      qf=(mq*(zc3+zc2)/2.0)+cq+eps+(2.0/pi) ! calculated to make avg in fuel=1
      qf=1.0/qf
      qg=pi/2.0 ! makes source avg in graphite one
      qg=qg*qscaleg
      qf=qscalef*qf

      qf=qf*dhsi/(rhos*cps*uav) ! non-dimensionalize source amplitude
      qg=qg*dhsi/(rhos*cps*uav)

      qvol = qf * (sin(pi*zbar)+eps) ! sinusoid for channel
      if (z.gt.z2) qvol = qf*((mq*z)+cq)  ! linear for plenum
      if (eg.gt.nelgv) qvol = qg*sin(pi*zbar) ! graphite source

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,eg) ! set up boundary conditions
c
c     NOTE ::: This subroutine MAY NOT be called by every process
c
c      implicit none
      
      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,eg) ! set up initial conditions

c      implicit none

      integer ix,iy,iz,eg

      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer e
c      logical idid
      common /comparams/ dh,dhsi,zc1,zc2,zc3,uav

      return
      end
c-----------------------------------------------------------------------

      subroutine userchk()

c      implicit none

      include 'SIZE'
      include 'TOTAL'
      include 'mpif.h'

      common /comparams/ dh,dhsi,zc1,zc2,zc3,uav
      integer ierr, myrank, filehandle
      integer lineLength, record, nproc
      character lf
      character(len = 13) :: opfile
      parameter (lineLength = 100)
      parameter (lf = Achar(10))
      character(len = lineLength + 1) :: line

      real tempave, roivol, roiz1, roiz2
      real xmax, xmin, ymax, ymin, zmax, zmin

      call load_fld('msre0.f00001')
      call domain_size(xmin,xmax,ymin,ymax,zmin,zmax)
      
      roiz1 = 1.0
      roiz2 = 2.0

      roivol = (xmax - xmin) * (ymax - ymin) * (roiz2 - roiz1)
      tempave = 0.0

      do i = 1, lx1*ly1*lz1*lelt
          if (zm1(i,1,1,1).ge.roiz1.and.zm1(i,1,1,1).le.roiz2) then
              tempave = tempave + (t(i,1,1,1,1)*bm1(i,1,1,1))
          end if
      end do

      tempave = glsum(tempave,1)/roivol

      ierr = 1
      
      call mpi_comm_rank(mpi_comm_world, myrank, ierr)
      call mpi_comm_size( mpi_comm_world, nproc, ierr)
    
      call mpi_type_contiguous(lineLength + 1, mpi_character,
     $                          record, ierr)
      
      call mpi_type_commit( record, ierr)
 
      opfile = 'tempave.data'

      call MPI_FILE_OPEN(MPI_COMM_WORLD, opfile,  
     $                 MPI_MODE_WRONLY + MPI_MODE_CREATE, 
     $                 MPI_INFO_NULL, filehandle, ierr) 

      call MPI_FILE_SET_VIEW(filehandle, 0_mpi_offset_kind, 
     $             record, record , 'native',  
     $                     MPI_INFO_NULL, ierr) 


      do i = myrank,nproc-1, nproc
         write(line, '("thread:",i0,f16.8,f16.8,f16.8)') 
     $                myrank, tempave
         line( len(line) : len(line) ) = lf
         call mpi_file_write_at(filehandle, int( i, mpi_offset_kind),
     $               line, 1, record, mpi_status_ignore, ierr)
      end do

      call MPI_FILE_CLOSE(filehandle, ierr)
     
      call mpi_type_free(record, ierr)
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userqtl ! Set thermal divergence

      call userqtl_scig 

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat()   ! This routine to modify element vertices

c      implicit none

      include 'SIZE'
      include 'TOTAL'
      
      common /comparams/ dh,dhsi,zc1,zc2,zc3,uav

      dh=0.624
      dhsi=0.0158496
      zc1=-1.0/dh
      zc2=1.0/dh
      zc3=2.0/dh
      uav=0.2194
      return
      
      end
c-----------------------------------------------------------------------
      subroutine usrdat2()  ! This routine to modify mesh coordinates

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat3()

c      implicit none

      include 'SIZE'
      include 'TOTAL'

      return
      end
c-----------------------------------------------------------------------
